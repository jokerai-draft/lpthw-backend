
=== 表象 作为 defect ===

State1Service initState() called. State1Service loadStateFromFile() called.
State1Service initState() called. State1Service loadStateFromFile() called.
State1Service initState() called. State1Service loadStateFromFile() called.

进行了三次调用 loadStateFromFile()
其中两次是 Component1 的 init 和 onNotif , 一次是 event handler 的 handle
前两次是为了获得最新数据 (event 产生之后就会有最新数据), 后一次是为了获得上下文

=== 对于 defect 的另一种解释: 最新数据应该仅仅在 event 之后产生, 在新 event 之后才可能会 (将新数据吐出和老数据吐出放在一起看) 看出 defect 的产生 ===

一次请求 event ，理论上只有一次数据获取。第二次数据获取的时候，已经是第二次 event 了

如果把两次 event 压缩到一次感知，那么就会有 defect 效果
如果仅仅是展示(第一次 也是唯一一次)所获取的数据，那么不会有 defect 效果 // 因为只有一次 event











评论区
最终 "去 defect" 的效果是 把数据获取的次数压缩到最低 但仍然为任何一次event返回最新值
办法：让一次 event 对应一次数据获取
不需要的办法(不需要的考虑,不需要的一套问题 as 关注的问题): 单例模式 singleton pattern



评论区
"下次才能获取到"
一般 state 更新之后是下次刷新才能获取到 // 这可以探测出来 结果就是数据库和载入页数据不一致
onNotif 是让这次刷新(强制刷新)就能获取到，也就是说 如果没有强制获取机制 那么(即使已更新数据)只有下次(刷)才能获取到
 所以往往是推荐开启强制刷新的

